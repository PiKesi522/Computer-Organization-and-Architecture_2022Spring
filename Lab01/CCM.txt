while(true){
    if(B[1] == A[i - j]){
        A[j] = B[0]; 
        break;
    }else{
        j += 1;
    }
}
A[j] = B[0]; 
=======================================
Risc-V:
x10 : 1
x12 : addr_temp
x13 : A[]
x14 : B[]
x27 : data_temp2
x28 : i
x29 : j
x30 : data_temp
---------------------------------------
Loop:   sub x30, x28, x29 	// compute i-j 
00      0100000 11101 11100 000 11110 0110011
        add x12, x30, x30	// multiply by 8 to convert the double word offset to a byte offset
04      0000000 11110 11110 000 01100 0110011
        add x12, x12, x12 
08      0000000 01100 01100 000 01100 0110011
        add x12, x12, x12		
12      0000000 01100 01100 000 01100 0110011
        add x12, x12, x13       	// x12 store (i - j) * 8 + A[0], x13 = (i-j)*8; x30 = A[0]
16      0000000 01101 01100 000 01100 0110011
        ld x30, 0(x12) 		// x30 load A[i-j] 
20      000000000000  01100 011 11110 0000011
        ld x27, 8(x14)         	 // x31 load B[1]
24      000000001000  01110 011 11011 0000011
        beq x27, x30, Exit(40 - 28 = 12 = 000000000110[0])
28      0 000000 11110 11011 000 0110 0 1100111
        add x29, x29, x10       	// j += 1
32      0000000 01010 11101 000 11101 0110011
        jal x0, Loop(-36 = 11111111111111101110[0])
36      1 1111101110 1 11111111 00000 1101111
Exit:   ld x30, 0(x14)         	 // x30 = B[0]
40      000000000000  01110 011 11110 0000011
        add x12, x29, x29       	// j * 8
44      0000000 11101 11101 000 01100 0110011
        add x12, x12, x12
48      0000000 01100 01100 000 01100 0110011
        add x12, x12, x12
52      0000000 01100 01100 000 01100 0110011
        add x12, x12, x13
56      0000000 01101 01100 000 01100 0110011
        sd x30, 0(x12)         	 // A[j] = x30
60      0000000 11110 01100 011 00000 0100011
        end
64      1111111 11111 11111 111 11111 1111111
=======================================
32bit Instrcution 
01000001110111100000111100110011
00000001111011110000011000110011
00000000110001100000011000110011
00000000110001100000011000110011
00000000110101100000011000110011
00000000000001100011111100000011
00000000100001110011110110000011
00000001111011011000011001100111
00000000101011101000111010110011
11111101110111111111000001101111
00000000000001110011111100000011
00000001110111101000011000110011
00000000110001100000011000110011
00000000110001100000011000110011
00000000110101100000011000110011
00000001111001100011000000100011
11111111111111111111111111111111
